apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    def version = version()

    defaultConfig {
        applicationId 'fr.cph.chicago'
        versionCode Integer.parseInt(version['version.code'])
        versionName version['version.name']

        minSdkVersion 21
        targetSdkVersion 28
        multiDexEnabled true

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        def props = properties()

        resValue "string", "google_maps_api_key", props['google.streetmap.key']
        resValue "string", "cta_train_key", props['cta.train.key']
        resValue "string", "cta_bus_key", props['cta.bus.key']

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
            }
        }
    }

    // Change output apk name
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${parent.name}-${output.baseName}-${variant.versionName}.apk"
        }
    }

    compileOptions {
        def javaVersion = JavaVersion.VERSION_1_8
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/kotlin']
        }
        googleplay {
            java.srcDirs = ['src/googleplay/kotlin']
        }
        foss {
            java.srcDirs = ['src/foss/kotlin']
        }
    }

    signingConfigs {
        release {
            def propsFile = this.file('keystore.properties')
            if (propsFile.exists() && gradle.startParameter.taskNames.any {
                it.contains('Release') || it.contains('build')
            }) {
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                File storeF = new File(props['storeFile'].toString())

                storeFile = storeF
                storePassword new String(System.console().readPassword("\n\$ Enter keystore password: "))
                keyAlias = props['keyAlias']
                keyPassword new String(System.console().readPassword("\n\$ Enter alias password: "))
            } else {
                storeFile file('default')
                storePassword 'default'
                keyAlias 'default'
                keyPassword 'default'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFile 'proguard-android-optimize.txt'
            if (signingConfigs.hasProperty('release')) {
                if (signingConfigs.release.storePassword != 'default') {
                    signingConfig signingConfigs.release
                }
            }
        }
    }

    flavorDimensions "env"

    productFlavors {
        googleplay {
            dimension "env"
        }
        foss {
            dimension "env"
            applicationIdSuffix ".foss"
            resValue "string", "mapbox_token", properties()['mapbox.token']
        }
    }

    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

dependencies {

    implementation(
        // Kotlin
        [group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version],

        // Google
        [group: 'com.android.support', name: 'design', version: google_support_version],

        // Jackson
        [group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jackson_version],
        [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jackson_version],
        [group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jackson_version],
        [group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: jackson_version],

        // RxJava
        [group: 'io.reactivex.rxjava2', name: 'rxandroid', version: reactivex_android_version],
        [group: 'io.reactivex.rxjava2', name: 'rxjava', version: reactivex_java_version],

        // Tools
        [group: 'com.jakewharton', name: 'butterknife', version: butterknife_version],
        [group: 'pub.devrel', name: 'easypermissions', version: easypermissions_version],
        [group: 'com.github.chrisbanes', name: 'PhotoView', version: photoview_version],
        [group: 'com.sothree.slidinguppanel', name: 'library', version: sliding_up_panel_version],
        [group: 'org.apache.commons', name: 'commons-collections4', version: commons_collections4_version],
        [group: 'org.apache.commons', name: 'commons-text', version: commons_text],
        [group: 'com.univocity', name: 'univocity-parsers', version: univocity_parsers_version],
    )

    googleplayImplementation(
        [group: 'com.google.android.gms', name: 'play-services-maps', version: google_play_version],
        [group: 'com.google.android.gms', name: 'play-services-location', version: google_play_version],
    )

    fossImplementation(
        [group: 'com.mapbox.mapboxsdk', name: 'mapbox-android-sdk', version: '6.5.0'],
        [group: 'com.mapbox.mapboxsdk', name: 'mapbox-android-plugin-locationlayer', version: '0.10.0'],
    )

    kapt(
        [group: 'com.jakewharton', name: 'butterknife-compiler', version: butterknife_version],
    )

    testImplementation(
        testImplementation(group: 'junit', name: 'junit', version: junit_version) {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        },
        testImplementation(group: 'org.mockito', name: 'mockito-core', version: mockito_version) {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        },
        [group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrect_version]
    )

    androidTestImplementation(
        [group: 'com.android.support', name: 'support-annotations', version: google_support_version],
        [group: 'com.android.support.test', name: 'runner', version: google_support_version_test],
        [group: 'com.android.support.test', name: 'rules', version: google_support_version_test],
        // Optional -- UI testing with Espresso
        androidTestImplementation(group: 'com.android.support.test.espresso', name: 'espresso-core', version: google_support_version_test_espresso) {
            exclude group: 'com.android.support', module: 'support-annotations'
        },
        // Optional -- UI testing with UI Automator
        [group: 'com.android.support.test.uiautomator', name: 'uiautomator-v18', version: google_support_version_test_uiautomator]
    )
}

task bumpVersion {
    doLast {
        def props = new Properties()
        def version = this.file('version.properties')
        props.load(new FileInputStream(version))
        props['version.code'] = String.valueOf(Integer.parseInt(props['version.code']) + 1)

        def type = new String(System.console().readLine("\n\$ Bump type? [0: Bug fix | 1: Feature | 2: Major]"))
        def versionName = props['version.name'].tokenize('.').toArray()
        def newVersionName
        switch(type) {
            case "0":
                // bug fix
                newVersionName = versionName[0] + "." + versionName[1] + "." + (Integer.parseInt(versionName[2]) + 1)
                break
            case "1":
                // add feature
                newVersionName = versionName[0] + "." + (Integer.parseInt(versionName[1]) + 1) + ".0"
                break
            case "2":
                // major change
                newVersionName = (Integer.parseInt(versionName[0]) + 1) + ".0.0"
                break
            default:
                throw new AssertionError("Wrong type [" + type + "]")
        }
        props['version.name'] = newVersionName
        props.store(version.newWriter(), null)
    }
}

task currentVersion {
    doLast {
        def props = new Properties()
        def version = this.file('version.properties')
        props.load(new FileInputStream(version))
        println("Version name: " + props['version.name'])
        println("Version code: " + props['version.code'])
        println("FDroid tag: " + props['version.name'] + "-fdroid")
    }
}

bumpVersion.finalizedBy currentVersion

def properties() {
    def props = new Properties()
    def appProperties = this.file('app.properties')
    if (appProperties.exists()) {
        props.load(new FileInputStream(appProperties))
    } else {
        throw new AssertionError("No app.properties or gradle properties found")
    }
    return props
}

def version() {
    def props = new Properties()
    def version = this.file('version.properties')
    props.load(new FileInputStream(version))
    return props
}
